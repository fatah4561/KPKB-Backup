<?php
namespace Member\Controller;

use AdminPanel\Model\Entity\TransactionType;
use Cake\Auth\DefaultPasswordHasher;
use Cake\Core\Configure;
use Member\Controller\AppController;

/**
 * Transfers Controller
 *
 * @property \AdminPanel\Model\Table\TransfersTable $Transfers
 * @property \AdminPanel\Model\Table\TransactionsTable $Transactions
 * @method \Member\Model\Entity\Transfer[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class TransfersController extends AppController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadModel('AdminPanel.Transfers');
        $this->loadModel('AdminPanel.Transactions');
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {
        $customer_id = $this->Auth->user('id');

        if ($this->request->is('ajax')) {
            $this->viewBuilder()->setLayout('ajax');

            $pagination = $this->request->getData('pagination');
            $sort = $this->request->getData('sort');
            $query = $this->request->getData('query');

            $data = $this->Transfers->find();

            $data = $data
                ->contain([
                    'Customers',
                    'TargetCustomers',
                ])
                ->where([
                    'OR' => [
                        'Transfers.customer_id' => $customer_id,
                        'Transfers.target_customer_id' => $customer_id,
                    ]
                ])
                ->orderDesc('Transfers.id');

            if ($query && is_array($query)) {
                if (isset($query['generalSearch'])) {
                    $search = $query['generalSearch'];
                    unset($query['generalSearch']);
                    /**
                    custom field for general search
                    ex : 'Users.email LIKE' => '%' . $search .'%'
                     **/
                    $data->where(['OR' => [
                        'Transfers.description LIKE' => '%' . $search .'%',
                        'Customers.username LIKE' => '%' . $search .'%',
                        'TargetCustomers.username LIKE' => '%' . $search .'%',
                        'Transfers.created LIKE' => '%' . $search .'%',
                    ]]);
                }

                $data->where($query);


            }

            if (isset($sort['field']) && isset($sort['sort'])) {
                $data->order([$sort['field'] => $sort['sort']]);
            }

            if (isset($pagination['perpage']) && is_numeric($pagination['perpage'])) {
                $data->limit($pagination['perpage']);
            }
            if (isset($pagination['page']) && is_numeric($pagination['page'])) {
                $data->page($pagination['page']);
            }

            $total = $data->count();

            $data = $data->map(function (\AdminPanel\Model\Entity\Transfer $row) use ($customer_id) {
                $row->type = $row->target_customer_id == $customer_id ? 'received' : 'transfer';
                return $row;
            });

            $result = [];
            $result['data'] = $data->toArray();

            $result['meta'] = array_merge((array) $pagination, (array) $sort);
            $result['meta']['total'] = $total;


            return $this->response->withType('application/json')
                ->withStringBody(json_encode($result));
        }
    }



    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $customer_id = $this->Auth->user('id');
        $username = $this->Auth->user('username');

        $minTransfer = Configure::read('Transfer.min', 100000);
        $feeTransfer = Configure::read('Transfer.fee', 0);
        $typeTransfer = Configure::read('Transfer.type', 'nominal');
        if ($typeTransfer == 'percent' && $feeTransfer > 0) {
            $amount = (float) $this->getRequest()->getData('amount');
            $feeTransfer = round($feeTransfer / 100 * $amount, 0);
        }


        $customerEntity = $this->Transfers->Customers->find()
            ->select(['id', 'balance'])
            ->where([
                'id' => $customer_id
            ])
            ->first();

        $balance = $customerEntity ? $customerEntity->get('balance') : 0;



        $transfer = $this->Transfers->newEntity([
            'customer_id' => $customer_id
        ]);

        if ($this->request->is('post')) {

            $emptyBalanceMessage = ($balance - $feeTransfer) > 0 ? __( 'This amount must be less than {0}', [($balance - $feeTransfer)])
                : __( 'Insufficient balance');

            $validator = $this->Transfers->getValidator('default');
            $validator->requirePresence('username')
                ->greaterThanOrEqual('amount', $minTransfer, __('This amount must be greater than {0}', [$minTransfer]))
                ->lessThanOrEqual('amount', ($balance - $feeTransfer), $emptyBalanceMessage)
                ->add('username', 'check', [
                    'rule' => function($value) use(&$transfer) {
                        /**
                         * @var \AdminPanel\Model\Entity\Customer $check
                         */
                        $check = $this->Transfers->Customers->find()
                            ->select([
                                'Customers.id',
                                'Customers.username',
                            ])
                            ->where([
                                'Customers.username' => $value,
                                'Customers.is_active' => 1,
                            ])
                            ->first();

                        $exists = $check && !empty($check->username);
                        if ($exists) {
                            $transfer->target_customer_id = $check->id;
                        }

                        return $exists;
                    },
                    'message' => __( 'Invalid destination username')
                ])
                ->add('username', 'self', [
                    'rule' => function($value) use ($username) {
                        return strtolower($username) != strtolower($value);
                    },
                    'message' => __('Can\'t transfer to yourself')
                ])
                ->add('password', 'check', [
                    'rule' => function($value) use ($customer_id) {
                        /**
                         * @var \AdminPanel\Model\Entity\Customer $customer
                         */
                        $customer = $this->Transfers->Customers->find()
                            ->select([
                                'Customers.password'
                            ])
                            ->where([
                                'Customers.id' => $customer_id
                            ])
                            ->first();
                        $check = (new DefaultPasswordHasher())->check($value, $customer->password);
                        return $check;
                    },
                    'message' => __( 'Invalid password')
                ]);


            $transfer = $this->Transfers->patchEntity($transfer, $this->request->getData());

            $transfer->fee = $feeTransfer;
            $transfer->description = strip_tags($transfer->description);

            $this->Transfers->getConnection()->begin();

            if ($this->Transfers->save($transfer)) {

                $success = $this->Transactions->create(
                    TransactionType::TRANSFER,
                    $customer_id,
                    -($transfer->amount + $transfer->fee),
                    $transfer->description
                );

                if ($success) {
                    $this->Transactions->create(
                        TransactionType::RECEIVED,
                        $transfer->target_customer_id,
                        $transfer->amount,
                        $transfer->description
                    );

                    if ($transfer->fee > 0) {
                        $this->Transactions->create(
                            TransactionType::UNALOCATEDBONUS,
                            Configure::read('AlocatedBonus.customer_id', 1),
                            $transfer->fee,
                            'UnAlocated Transfer fee'
                        );
                    }

                } else {
                    $this->Transfers->getConnection()->rollback();
                    $this->Flash->error(__('The transfer could not be saved, Error system 500.'));
                    return $this->redirect(['action' => 'index']);
                }

                $this->Transfers->getConnection()->commit();
                $this->Flash->success(__('The transfer has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The transfer could not be saved. Please, try again.'));
            $this->Transfers->getConnection()->rollback();
        }
        $this->set(compact('transfer', 'balance'));
    }


}
