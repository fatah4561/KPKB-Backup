<?php
namespace AdminPanel\Controller\Component;

use Cake\Controller\Component;
use Cake\Controller\ComponentRegistry;
use Cake\ORM\TableRegistry;

/**
 * DataTable component
 * @property \Cake\ORM\Query $_table;
 */
class DataTableComponent extends Component
{

    /**
     * Default configuration.
     *
     * @var array
     */
    protected $_defaultConfig = [];
    protected $_table = null;
    protected $_columns = [];
    protected $_alias = null;

    public function initialize(array $config)
    {
        //parent::initialize($config); // TODO: Change the autogenerated stub
    }

    /**
     * @param $model
     * @return $this
     */
    public function adapter($model)
    {
        if ($model instanceof \Cake\ORM\Query) {
            $this->_table = $model;
        } else if ($model instanceof \Cake\ORM\Table) {
            $this->_table = $model->find();
        } else {
            $table = TableRegistry::get($model);
            $this->_alias = $table->getAlias();
            $this->_table = $table->find();
        }

        return $this;
    }

    public function changeColumn($field, $column)
    {
        foreach($this->_columns as $key => $val) {
            if ($val === $field) {
                unset($this->_columns[$key]);
                $this->_columns[$field] = $column;
            }
        }
        //debug($this->_columns);exit;
        return $this;
    }

    /**
     * @param $contain
     * @return $this
     */
    public function contain($contain)
    {
        $this->_table->contain($contain);
        return $this;
    }

    public function where($condition)
    {
        $this->_table->where($condition);
        return $this;
    }

    /**
     * @return \Cake\ORM\Query
     */
    public function getTable()
    {
        return $this->_table;
    }

    public function getColumns()
    {
        foreach($this->getController()->request->getData('columns') as $column) {
            if(array_key_exists('data', $column)) {
                array_push($this->_columns, $column['data']);
            }
        }
        return $this;
    }

    public function select(array $column)
    {
        $this->_table->select($column);
        return $this;
    }

    /**
     * @return bool
     */
    public function isAjax()
    {
        return $this->getController()->request->is('ajax');
    }

    protected function setParams()
    {
        $request = $this->getController()->request;
        $limit = $request->getData('length');
        $start = $request->getData('start');
        $order = $request->getData('order');
        $columns = $request->getData('columns');
        if (isset($order) && is_array($order)) {
            $sorting = [];
            foreach($order as $key => $val) {
                if (array_key_exists('column', $val) && array_key_exists('dir', $val)) {
                    if (array_key_exists($val['column'], $columns)) {
                        if (array_key_exists('data', $columns[$val['column']])) {
                            array_push($sorting, [$columns[$val['column']]['data'] => $val['dir']]);
                        }
                    }
                }
            }
            foreach($sorting as $sort) {
                $this->_table->order($sort);
            }
        }

        if (isset($limit) && is_numeric($limit)) {
            $this->_table->limit($limit);
        } else {
            $this->_table->limit(10);
        }

        if (isset($start) && is_numeric($start)) {
            $this->_table->offset($start);
        }

    }

    protected function renderSelect()
    {
        $columns = [];
        foreach($this->_columns as $key => $val) {
            if (is_numeric($key)) {
                $columns[$val] = $this->_alias . '.' . $val;
            } else {
                $columns[$key] = $val;
            }
        }
        $this->_columns = $columns;
        $this->_table->select($this->_columns);
        return $this;
    }

    public function Search(\Closure $callback)
    {
        $search = $this->getController()->request->getData('search');
        if (array_key_exists('value', $search) && !empty($search['value'])) {
            $d = $callback($search['value'], $this->_table->newExpr());
            $this->_table->where($d);
        }
        return $this;
    }

    /**
     * @return \Cake\Http\Response
     */
    public function response()
    {
        $this->renderSelect();
        $total = $this->_table->count();
        $this->setParams();
        $data = [];
        $data['data'] = $this->_table;
        $data['iTotalRecords'] = $total;
        $data['iTotalDisplayRecords'] = $total;
        $data['sEcho'] = 0;
        $data['sColumns'] = '';

        return $this->getController()->response->withType('application/json')
            ->withStringBody(json_encode($data));
    }
}
